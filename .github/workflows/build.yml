name: Build

on:
  push:
#     branches: [ "main" ]


jobs:
  get-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
  
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        
      - name: Create version file
        run: echo ${{ steps.gitversion.outputs.fullSemVer }} >> ./version_with_new_line.txt
        
      - name: remove new-line from file
        run: tr -d '\n' < version_with_new_line.txt > version.txt
        
      - run: cat version.txt
        
      - name: Upload version file as artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: version
          path: version.txt
          if-no-files-found: error
  
  build-android-aab:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Get version
        uses: actions/download-artifact@v3.0.2
        with:
          name: version
      - run: cat version.txt
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1.1.6
        with:
          path: version.txt
  
      - name: Install flutter
        uses: subosito/flutter-action@v2.8.0
      
      - run: flutter doctor -v
      - run: flutter pub get

      - name: Configure Keystore
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "file=upload-keystore.jks" >> key.properties
          echo "password=$KEYSTORE_PASSWORD" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
        working-directory: android
        
      - name: Build app
        run: flutter build appbundle --build-name ${{ steps.version.outputs.content }} --build-number ${{ github.run_number }}
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: appbundle.aab
          path: build/app/outputs/bundle/release/app-release.aab
          if-no-files-found: error
  
  build-android-apk:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Get version
        uses: actions/download-artifact@v3.0.2
        with:
          name: version
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1.1.6
        with:
          path: version.txt
  
      - name: Install flutter
        uses: subosito/flutter-action@v2.8.0
      
      - run: flutter doctor -v
      - run: flutter pub get

      - name: Configure Keystore
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "file=upload-keystore.jks" >> key.properties
          echo "password=$KEYSTORE_PASSWORD" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
        working-directory: android
        
      - name: Build app
        run: flutter build apk --build-name ${{ steps.version.outputs.content }} --build-number ${{ github.run_number }}
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: appbundle.apk
          path: build/app/outputs/flutter-apk/app-release.apk
          if-no-files-found: error
          
  build-linux:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Get version
        uses: actions/download-artifact@v3.0.2
        with:
          name: version
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1.1.6
        with:
          path: version.txt
          
      - run: sudo apt install libgtk-3-dev
      - run: sudo apt install clang
      - run: sudo apt install ninja-build
          
      - name: Install flutter
        uses: subosito/flutter-action@v2.8.0
      
      - run: flutter doctor -v
      - run: flutter pub get
      
      - name: Build app
        run: flutter build linux --build-name ${{ steps.version.outputs.content }} --build-number ${{ github.run_number }}
        
      - name: bundle app
        run: tar -czvf qr_code_generator.tar.gz build/linux/x64/release/bundle
        
      - name: Upload version file as artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: linux
          path: qr_code_generator.tar.gz
          if-no-files-found: error
          
  build-windows:
    runs-on: windows-latest
    needs: get-version
    if: ${{ false }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Get version
        uses: actions/download-artifact@v3.0.2
        with:
          name: version
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1.1.6
        with:
          path: version.txt
          
      - name: Install flutter
        uses: subosito/flutter-action@v2.8.0
      
      - run: flutter doctor -v
      - run: flutter pub get
      
      - name: Build app
        run: flutter pub run msix:create --build-name ${{ steps.version.outputs.content }} --build-number ${{ github.run_number }}
          
#  release-to-google-play:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download a Build Artifact
#        uses: actions/download-artifact@v3.0.2
#        with:
#          name: version
#    
#      - name: Create service_account.json
#        run: echo '${{ secrets.PLAY_STORE_CONFIG_JSON }}' > service_account.json
#        
#      - name: Upload to Google Play
#        uses: r0adkll/upload-google-play@v1.0.19
#        with:
#          serviceAccountJson: service_account.json
#          packageName: com.wimvanlaer.qr_code_generator
#          releaseFiles: appbundle.aab
#          status: completed
#          track: internal
