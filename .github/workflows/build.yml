name: Build

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:


env:
  ANDROID_ARTIFACT: android
  LINUX_ARTIFACT: linux
  IOS_ARTIFACT: iphone
  WINDOWS_ARTIFACT: windows
  WEB_ARTIFACT: web
  GITHUB_PAGES_ARTIFACT: githubPages

jobs:
  getVersion:
    name: get version
    runs-on: ubuntu-latest
    outputs:
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
      majorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
  
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.7
        
  buildAndroidAppBundle:
    name: build Android app-bundle ü§ñ
    runs-on: ubuntu-latest
    needs: getVersion
    if: false
    env:
      ARTIFACT_PATH: qr_code_generator.aab
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install flutter
        uses: subosito/flutter-action@v2.10.0
      
      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.4
        with:
          java-version: 17

      - run: flutter doctor -v
      - run: flutter pub get
      
      - name: Configure Keystore
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "file=upload-keystore.jks" >> key.properties
          echo "password=$KEYSTORE_PASSWORD" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
        working-directory: android
        
      - name: Build appbundle
        run: flutter build appbundle --build-name ${{ needs.getVersion.outputs.fullSemVer }} --build-number ${{ github.run_number }}
        
      - name: Stage artifact file
        run: mv build/app/outputs/bundle/release/app-release.aab ${{ env.ARTIFACT_PATH }}
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.ANDROID_ARTIFACT }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
  
  buildAndroidApk:
    name: build Android apk ü§ñ
    runs-on: ubuntu-latest
    needs: getVersion
    if: false
    env:
      ARTIFACT_PATH: qr_code_generator.apk
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Install flutter
        uses: subosito/flutter-action@v2.10.0

      - name: Setup Java JDK
        uses: actions/setup-java@v1.4.4
        with:
          java-version: 17
      
      - run: flutter doctor -v
      - run: flutter pub get

      - name: Configure Keystore
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "file=upload-keystore.jks" >> key.properties
          echo "password=$KEYSTORE_PASSWORD" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
        working-directory: android
        
      - name: Build apk
        run: flutter build apk --build-name ${{ needs.getVersion.outputs.fullSemVer }} --build-number ${{ github.run_number }}
      
      - name: Stage artifact file
        run: mv build/app/outputs/flutter-apk/app-release.apk  ${{ env.ARTIFACT_PATH }}
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.ANDROID_ARTIFACT }}
          path:  ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
  
  buildIos:
    name: build iOS üçè
    runs-on: macos-latest
    needs: getVersion
    env:
      ARTIFACT_PATH: qr_code_generator.ipa
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Import certificate and provisioning profile
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPSTORE_CERT: ${{ secrets.APPSTORE_CERT }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          
          echo -n "$APPLE_PROVISIONING_PROFILE" | base64 --decode --output $PP_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          echo decoding certificate
          echo -n "$APPSTORE_CERT" | base64 --decode --output $CERTIFICATE_PATH
          echo importing certificate
          security import $CERTIFICATE_PATH -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          
      - run: flutter doctor -v
      - run: flutter pub get
      
      - name: Build linux
        run: flutter build ipa --rlease --build-name ${{ needs.getVersion.outputs.fullSemVer }} --build-number ${{ github.run_number }} --export-options-plist=ios/Runner/ExportOptions.plist

      - name: Stage artifact file
        run: mv build/ios/ipa/*.ipa  ${{ env.ARTIFACT_PATH }}
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.IOS_ARTIFACT }}
          path:  ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
          
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
          
  buildLinux:
    name: build Linux üêß
    runs-on: ubuntu-latest
    needs: getVersion
    if: false
    env:
      ARTIFACT_PATH: qr_code_generator.tar.gz
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: "install build dependencies"
        run: | 
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
          
      - name: Install flutter
        uses: subosito/flutter-action@v2.10.0
      
      - run: flutter doctor -v
      - run: flutter pub get
      
      - name: Build linux
        run: flutter build linux --build-name ${{ needs.getVersion.outputs.fullSemVer }} --build-number ${{ github.run_number }}

      - name: Creat tarball
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'tar'
          directory: build/linux/x64/release
          path: bundle
          filename: bundle.tar.gz
        
      - name: Stage artifact file
        run: mv build/linux/x64/release/bundle.tar.gz ${{ env.ARTIFACT_PATH }}
      
      - name: Upload version file as artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.LINUX_ARTIFACT }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
          
  buildWindows:
    name: build Windows ü™ü
    runs-on: windows-latest
    needs: getVersion
    if: false
    env:
      ARTIFACT_PATH: qr_code_generator.msix
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Install flutter
        uses: subosito/flutter-action@v2.10.0
      
      - run: flutter doctor -v
      - run: flutter pub get
      
      - name: Build app
        run: flutter pub run msix:create --version ${{ needs.getVersion.outputs.majorMinorPatch }}.${{ github.run_number }}
            
      - name: Stage artifact file
        run: mv build/windows/runner/Release/qr_code_generator.msix ${{ env.ARTIFACT_PATH }}
         
      - name: Upload version file as artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.WINDOWS_ARTIFACT }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
           
  buildWeb:
    name: build web üåê
    runs-on: ubuntu-latest
    needs: getVersion
    if: false
    env:
      ARTIFACT_PATH: qr_code_generator/
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Install flutter
        uses: subosito/flutter-action@v2.10.0
      
      - run: flutter doctor -v
      - run: flutter pub get
      
      - name: Build app
        run: flutter build web --build-name ${{ needs.getVersion.outputs.fullSemVer }}.${{ github.run_number }}
        
      - name: Stage artifact file
        run: mv build/web/ ${{ env.ARTIFACT_PATH }}
         
      - name: Upload version file as artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.WEB_ARTIFACT }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
          
  buildGithubPages:
    name: build github pages üêô
    runs-on: ubuntu-latest
    needs: getVersion
    if: false
    env:
      ARTIFACT_PATH: qr_code_generator/
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Install flutter
        uses: subosito/flutter-action@v2.10.0
      
      - run: flutter doctor -v
      - run: flutter pub get
      
      - name: Build app
        run: flutter build web --build-name ${{ needs.getVersion.outputs.fullSemVer }}.${{ github.run_number }} --base-href "/qr_code_generator/"
        
      - name: Stage artifact file
        run: mv build/web/ ${{ env.ARTIFACT_PATH }}
         
      - name: Upload version file as artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.GITHUB_PAGES_ARTIFACT }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
          
          
  uploadToGooglePlay:
    name: upload to GooglePlay
    runs-on: ubuntu-latest
    needs: buildAndroidAppBundle
    if: false
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.ANDROID_ARTIFACT }}

      - name: Create service_account.json
        run: echo '${{ secrets.PLAY_STORE_CONFIG_JSON }}' > service_account.json
        
      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJson: service_account.json
          packageName: com.wimvanlaer.qr_code_generator
          releaseFiles: qr_code_generator.aab
          status: completed
          track: internal
